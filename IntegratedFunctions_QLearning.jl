
```
OVERVIEW:

There will be a Main function that will loop through every week of a season and define the inputs for Q-learning as well as update the Q-table.

    Current Subfunctions that still need to be filled out:
    -PlayerTags
    -RankingstoPlayers
    -TransitionState
    -RewardFunction
    -QLearning 

````
    function PlayerTags(weeklydata)
        #This function assigns integer "tags" to each of the 24 players (8 of ea position) used in a season.
        #Input: weeklydata csv file
        #Output 
            #Players: dictionary that maps players to integers 

        #This function looks at the players for each position and chooses a random 8 players for each position 

        return Players 
    end

    function Main(Year_FileLocation, Players)
        #This function will define all of the inputs for Q-Learning (state, action, reward, and next state). In order to define the reward and next state, we need to conduct a rollout.
        #Inputs
            # Year_FileLocation: String of location of folder with csv files for a yearly season
            # Players: Dictionary with players for that season and their integer tag. Generated by function preseasonRanks 
        #Outputs 
            #State: Tuple with Player rankings
            #Action: Integer associated with one of 7 actions (swap QB up/down, swap RB up/down, swap WR up/down, do nothing)
            #Next State: Tuple with Player rankings 
            #Reward: Integer value of reward 


        #Initialize State 
        State = []

        for Game in yearlyData #run through every weekly game in a season at a time

            #Define State (output: array (or set or list or whatever) with the ranks of your three players)
            #Either a random lineup or from previous week (if using from previous week, state will be defined after Q-table is updated)
            if isempty(State)
                #generate random lineup
            end 
                
            
            #Keep track of which Player Integers correspond to the rankings in State
            StatePlayerTags = RankingToPlayers(State) 

            #Define Action (need to implement exploration strategy) 
            if Game < 5
                Action = rand(1:7)
            else
                #greedy action
                Action = argmax(Q)
            end

            #Transition State: accounts for the change in the roster based on the action but is based on current rankings. 
            #Will be used as input to the rollout function to determine new state.


            #Rollout
                #Input: Year and week of game
                #Output: Table with Player Integer, Rank, Position, and Fantasy Points 

            #Next State
                #Keep track of which Player Integers correspond to the rankings in State
                NextStatePlayerTags = RankingToPlayers(NextState) 

            #Reward
                #CumulativeReward Array adds an entry to array with the reward for that week's lineup. We'll keep track of this to show our agent improving over time. 


            #Update Q Table


            #Update NextState for next iteration
            State = NextState
 
        end
        return CumulativeReward
    end

    function RankingstoPlayers(State, weeklydata)
        return 
    end 

    function TransitionState(State, Action)
        #implements actions to update the state tuple 
    end

    function RewardFunction(NextState, Action)
    end

    function QLearning(state,action,reward,next_state)
    end